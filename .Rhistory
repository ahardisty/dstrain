x <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/billboard.csv'
read.csv(x)
weather <- read.csv(x)
head(weather)
# Column headers are values, not variable names
pew <- tbl_df(read.csv("data/pew.csv", stringsAsFactors = FALSE, check.names = FALSE))
library(tidyverse)
library(stringr)
library(EDAWR)
weather <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/weather.csv'
weather <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/weather.csv'
weather <- read.csv(weather)
weather_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/weather.csv'
preg_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/preg.csv'
read.csv(preg_source)
read.csv(preg2_source)
preg2_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/preg2.csv'
read.csv(preg2_source)
weather_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/weather.csv'
billboard_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/billboard.csv'
tb_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/tb.csv'
pew_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/pew.csv'
preg_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/preg.csv'
preg2_source <- 'https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/preg2.csv'
read.csv(weather_source)
read.csv(billboard_source)
read.csv(tb_source)
# Multiple variables stored in one column ---------------------------------
tb <- read.csv(tb_source, stringsAsFactors = FALSE)
tb
head(tb)
head(population)
# A clean example without the vignette ------------------------------------
# load data
population_source <- "https://raw.githubusercontent.com/rstudio/EDAWR/master/data-raw/population.csv"
population <- read.csv("population.csv", header = TRUE, check.names = FALSE)
head(population)
dim(population)
tidyPop2 <- gather(population, year, population, 2:20)
tidyPop2
ggplot(tidyPop) +
geom_line(aes(x = year, y = population, group = country))
# option 1: use colname(s)
tidyPop <- gather(population, year, population, - country)
ggplot(tidyPop) +
geom_line(aes(x = year, y = population, group = country))
world_map <- map_data("world")
world_map
a_countries <- tidyPop %>%
filter(grepl("^[A]\\w+", country) == TRUE)
ggplot(a_countries) +
geom_line(aes(x = year, y = population, group = country, color = country)) +
scale_y_continuous(name="Values")
ggplot(data = a_countries, aes(x  = year, y = population, group = country)) +
# geom_bar(stat = "identity") +
geom_line() +
facet_wrap(~country, ncol = 1, scales = 'free')
# Gather ------------------------------------------------------------------
tidyr::gather(cases, "year","n", 2:4)
tidyr::gather(cases, "year","n", -1)
?cases
head(cases)
data(cases)
df <- data.frame(city = c("New York", "New York", "London", "London", "Beijing", "Beijing"),
size = c("large", "small", "large", "small", "large", "small"),
amount = c(23,14,22,16,121,56),
stringsAsFactors = FALSE)
df
# make wide
df_wide <- spread(df, size, amount)
df_wide
# return back to long
df_long <- gather(pL, key = size, value = number, -city)
# return back to long
df_long <- gather(df_wide, key = size, value = number, -city)
# compare the original and coverted data frames
head(df) == head(df_long)
# compare the original and coverted data frames
head(df)
head(df_long)
# compare the original and coverted data frames
df %>% arrange(number)
# return back to long
df_long <- gather(df_wide, key = size, value = amount, -city)
# compare the original and coverted data frames
df %>% arrange(number)
df
# compare the original and coverted data frames
df %>% arrange(amount)
# return back to long
df_long <- gather(df_wide, key = size, value = amount, -city) %>% arrange(amount)
df_long
# compare the original and coverted data frames
df %>% arrange(amount) = df_long
df %>% arrange(amount)
# compare the original and coverted data frames
df %>% arrange(amount) %>% = df_long
# compare the original and coverted data frames
df %>% arrange(amount) == df_long
new_names_1 <- colnames(results) %>%
stringr::str_replace_all(pattern = ' ', "_")
results <- read.csv('data/survey_results.csv', check.names = FALSE, blank.lines.skip = TRUE, strip.white = TRUE, stringsAsFactors = FALSE)
# ignore the worning
head(results)
summary(results)
dim(results)
str(results)
new_names_2 <-results %>%
colnames() %>%
stringr::str_replace_all(pattern = "Please rate this food: ", replacement = "") %>%
stringr::str_replace_all(pattern = "What is the name of your", replacement = "") %>%
stringr::str_replace_all(pattern = "What is your", replacement = "") %>%
stringr::str_replace_all(pattern = "\\?", replacement = "") %>%
stringr::str_trim() %>%
stringr::str_replace_all(pattern = " ", replacement = "_") %>%
stringr::str_to_lower()
new_names_2 <-results %>%
colnames() %>%
stringr::str_replace_all(pattern = "Please rate this food: ", replacement = "") %>%
stringr::str_replace_all(pattern = "What is the name of your", replacement = "") %>%
stringr::str_replace_all(pattern = "What is your", replacement = "") %>%
stringr::str_replace_all(pattern = "\\?", replacement = "") %>%
stringr::str_trim() %>%
stringr::str_replace_all(pattern = " ", replacement = "_") %>%
stringr::str_to_lower()
new_names_2[5] <- "r_skill"
new_names_2[6] <- "ds_skill"
new_names_2[7] <- "ds_topics"
new_names_2[8] <- "models"
new_names_2[9] <- "packages"
new_names_2[12] <- "star_rank"
new_names_2[25] <- "gender"
# assign column names to data frame
names(results) <- new_names_2
results <- results %>%
mutate(num_models = stringr::str_count(models, pattern = ";")  +1 ,
num_packages = stringr::str_count(packages, pattern = ";") + 1,
num_skills = stringr::str_count(ds_skill, pattern = ";") + 1,
num_topics = stringr::str_count(ds_topics, pattern = ";") + 1 ,
ds_skill_desc = stringr::str_extract_all(ds_skill, "(\\D.*)") %>% str_trim(),
r_skill_desc = stringr::str_extract_all(r_skill, "(\\D).*") %>% str_trim(),
ds_skill_level = stringr::str_extract_all(ds_skill, "(\\d)") %>% as.numeric(),
r_skill_level = stringr::str_extract_all(r_skill, "(\\d)") %>% as.numeric())
results  <-  results %>%
mutate(num_ds_skill = stringr::str_count(ds_skill_desc, pattern = ";") + 1,
num_r_skill = stringr::str_count(r_skill_desc, pattern = ";") + 1)
results <- results %>%
separate(col = packages, into = paste0("package_",1:results2$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results2$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results2$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results2$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results2$num_r_skill), sep = ";")  %>% # r skills as column
select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = skill_type, value = qual_value, -c(start_date_at_slalom, start_date_at_zendesk
, hometown, favorite_us_city, burrito:chicken_kiev
, ds_skill_level, r_skill_level, star_rank)) %>%
stringr::str_replace(string = skill_type, pattern = "(_+[0-9])",replacement = "")
results <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = skill_type, value = qual_value, -c(start_date_at_slalom, start_date_at_zendesk
, hometown, favorite_us_city, burrito:chicken_kiev
, ds_skill_level, r_skill_level, star_rank)) %>%
stringr::str_replace(string = skill_type, pattern = "(_+[0-9])",replacement = "")
results <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = skill_type, value = qual_value, -c(start_date_at_slalom, start_date_at_zendesk
, hometown, favorite_us_city, burrito:chicken_kiev
, ds_skill_level, r_skill_level, star_rank))
results
results <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = variable, value = value, -c(start_date_at_slalom, start_date_at_zendesk
, hometown, favorite_us_city))
results <- read.csv('data/survey_results.csv', check.names = FALSE, blank.lines.skip = TRUE, strip.white = TRUE, stringsAsFactors = FALSE)
# assign column names to data frame
names(results) <- new_names_2
results <- results %>%
mutate(num_models = stringr::str_count(models, pattern = ";")  +1 ,
num_packages = stringr::str_count(packages, pattern = ";") + 1,
num_skills = stringr::str_count(ds_skill, pattern = ";") + 1,
num_topics = stringr::str_count(ds_topics, pattern = ";") + 1 ,
ds_skill_desc = stringr::str_extract_all(ds_skill, "(\\D.*)") %>% str_trim(),
r_skill_desc = stringr::str_extract_all(r_skill, "(\\D).*") %>% str_trim(),
ds_skill_level = stringr::str_extract_all(ds_skill, "(\\d)") %>% as.numeric(),
r_skill_level = stringr::str_extract_all(r_skill, "(\\d)") %>% as.numeric())
results  <-  results %>%
mutate(num_ds_skill = stringr::str_count(ds_skill_desc, pattern = ";") + 1,
num_r_skill = stringr::str_count(r_skill_desc, pattern = ";") + 1)
results <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = variable, value = value, -c(start_date_at_slalom, start_date_at_zendesk
, hometown, favorite_us_city))
results
bnames <- read.csv("data/bnames.csv.bz2")
births <- read.csv("data/births.csv")
head(bnames)
tail(bnames)
tbl_df(diamonds)
garrett$soundex[1]
# Your Turn
# --------------------------------
# use dplyr verbs to create a dataframe with your name
garrett <- filter(bnames, name == "Garrett")
garrett$soundex[1]
garrett
dim(filter(bnames, year > 2000 & prop > 0.01))
?select_helpers
?dplyr::select_helpers
births
ranks <- mutate(year_sex, rank = rank(desc(prop))
ranks <- mutate(year_sex, rank = rank(desc(prop)))
ranks <- mutate(year_sex, rank = rank(desc(prop)))
year_sex <- group_by(bnames2, year, sex)
