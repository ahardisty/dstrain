# select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = variable, value = value, -c(start_date_at_slalom, start_date_at_zendesk, hometown, favorite_us_city, favorite_non_us_city)) %>%
head()
ds_skill_level <- results_tidy %>%
filter(variable == "ds_skill_level") %>%
mutate(value = ifelse(is.na(value), 1,value) %>% as.numeric()) %>%
mutate(type = 'employee')
ds_skill_level
results_tidy
ds_skill_level <- results_tidy %>%
filter(variable == "ds_skill_level")
ds_skill_level
results_tidy
summary(as.factor(results_tidy$variable))
results_tidy
results_tidy <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
# select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = variable, value = value, -c(start_date_at_slalom, start_date_at_zendesk, hometown, favorite_us_city, favorite_non_us_city))
summary(as.factor(results_tidy$variable))
ds_skill_level <- results_tidy %>%
filter(variable == "ds_skill_level") %>%
mutate(value = ifelse(is.na(value), 1,value) %>% as.numeric()) %>%
mutate(type = 'employee')
ds_skill_level
ggplot(ds_skill_level)+
# geom_freqpoly(aes(value))+
geom_density(aes(value))+
# geom_histogram(aes(value), binwidth = 1) +
# geom_bar(aes(value), stat = 'count')+
scale_x_continuous(breaks = seq(1,6, by = 1)) +
ggtitle(label = "distribution of r skills")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "hometown")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = hometown, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5))
ggplot(ds_skill_level) +
geom_boxplot(aes(x = hometown, y = value, fill = hometown)) +
scale_y_continuous(breaks = seq(1,6, by = .5))
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = hometown))
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = hometown), stat = 'identity')
ds_skill_level
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = favorite_us_city), stat = 'identity')
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interactio(favorite_us_city, favorite_non_us_city), stat = 'identity')
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interactio(favorite_us_city, favorite_non_us_city), stat = 'identity'))
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interactio(favorite_us_city, favorite_non_us_city), stat = 'identity'))
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interaction(favorite_us_city, favorite_non_us_city), stat = 'identity'))
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interaction(favorite_us_city, favorite_non_us_city), stat = 'identity'))
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interaction(favorite_us_city, favorite_non_us_city)), stat = 'identity')
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interaction(favorite_us_city, favorite_non_us_city)), stat = 'identity') +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "interactino of favorite/nus and non us city")
ggplot(ds_skill_level) +
geom_bar(aes(x = hometown, y = value, fill = interaction(favorite_us_city, favorite_non_us_city)), stat = 'identity') +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "interactino of favorite\nus and non us city")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "hometown")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "favoritye us city")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "favorite us city")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = favorite_us_city, y = value)) +
scale_y_continuous(breaks = seq(1,6, by = .5))
ggplot(ds_skill_level) +
geom_boxplot(aes(x = favorite_us_city, y = value, fill = hometown))
ggplot(ds_skill_level) +
geom_boxplot(aes(x = favorite_us_city, y = value, fill = type))
ggplot(ds_skill_level) +
geom_boxplot(aes(x = favorite_us_city, y = value, fill = type)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "response type")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = favorite_us_city, y = value, fill = type)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of r skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "response type") +
labs(x = "favorite us city")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = favorite_us_city, y = value, fill = type)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of ds skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "response type") +
labs(x = "favorite us city", y = "ds_skill")
ggplot(ds_skill_level) +
geom_boxplot(aes(x = type, y = value, fill = favorite_us_city)) +
scale_y_continuous(breaks = seq(1,6, by = .5)) +
ggtitle(label = "distribution of ds skills using a boxplot - favorite us city") +
scale_fill_discrete(name = "favorite us city") +
labs(x = "response type", y = "Data Science Skill Level")
# What about food  -------------------------------------------------
colnames(results)
# What about food  -------------------------------------------------
colnames(tidy_results)
# What about food  -------------------------------------------------
colnames(results_tidy)
summary(results_tidy$variable)
summary(as.factor(results_tidy$variable))
results
results %>%
select(star_rank:gender)
results_tidy <-  results %>%
select(star_rank:gender)) %>%
gather(key = variable, value = value
, -c(country_of_origin:gender))
results_tidy <-  results %>%
select(star_rank:gender))
results %>%
select(star_rank:gender) %>%
gather(key = variable, value = value
, -c(country_of_origin:gender))
results %>%
select(star_rank:gender) %>%
gather(key = variable, value = value
, -c(country_of_origin:gender)) %>%
filter(variable != "star_rank")
results_tidy <-  results %>%
select(star_rank:gender) %>%
gather(key = food_name, value = score
, -c(country_of_origin:gender)) %>%
filter(food_name != "star_rank")
results_tidy
head(results_tidy)
food_rank <-  results %>%
select(star_rank:gender) %>%
gather(key = food_name, value = score
, -c(country_of_origin:gender)) %>%
filter(food_name != "star_rank")
food_rank
head(food_rank)
results_tidy
results_tidy <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
# select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = variable, value = value, -c(start_date_at_slalom, start_date_at_zendesk, hometown, favorite_us_city, favorite_non_us_city))
# save the tid(ier) data ------------------------------------------------------
saveRDS(results_tidy, file = "data/results_tidy.RDS")
# save the tid(ier) data ------------------------------------------------------
saveRDS(results_tidy, file = "data/results_tidy.rda")
# load clean data for modeling
load('data/TRAIN.rda')
# plot food rankings -------------------------------------------------
# create a specific data frame
load("data/results_tidy.rda")
# plot food rankings -------------------------------------------------
# create a specific data frame
rm(results_tidy)
load("data/results_tidy.rda")
# save the tid(ier) data ------------------------------------------------------
save(results_tidy, file = "data/results_tidy.rda")
results_tidy <- results %>%
separate(col = packages, into = paste0("package_",1:results$num_packages), sep = ";") %>% # package names as columns
separate(col = models, into = paste0("model_",1:results$num_models), sep = ";") %>% # model names as columns
separate(col = ds_skill_desc, into = paste0("ds_skill_",1:results$num_skills), sep = ";") %>%  # ds description as column
separate(col = ds_topics, into = paste0("ds_topic_",1:results$num_topics), sep = ";") %>%  # ds topic as column
separate(col = r_skill_desc, into = paste0("r_skill_",1:results$num_r_skill), sep = ";")  %>% # r skills as column
# select(-c(start_time:name,r_skill, ds_skill, num_models:num_topics, num_ds_skill, num_r_skill)) %>%
gather(key = variable, value = value, -c(start_date_at_slalom, start_date_at_zendesk, hometown, favorite_us_city, favorite_non_us_city))
# save the tid(ier) data ------------------------------------------------------
save(results_tidy, file = "data/results_tidy.rda")
# plot food rankings -------------------------------------------------
# create a specific data frame
rm(results_tidy)
load("data/results_tidy.rda")
save(results, file = "data/results_renamed.rds")
# plot food rankings -------------------------------------------------
# create a specific data frame
rm(results)
load("data/results_renamed.rds.rda")
save(results, file = "data/results_renamed.rds")
load("data/results_renamed.rda")
load("data/results_renamed.rds")
head(results)
# plot food rankings -------------------------------------------------
# create a specific data frame
rm(results)
load("data/results_renamed.rda")
# Aesthetics
qplot(displ, hwy, data = mpg, color = class)
equal_dim <- diamonds$x == diamonds$y
equal_dim
caret::dummyVars
?caret::dummyVars
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x <- (1,'R'',TRUE)
x <- (1,'R',TRUE)
x <- c(1,'R',TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/Slalom_Projects/dstrain/R/00-Syntax.R', echo=TRUE)
df <- data.frame(
name = c("John", "Paul", "George", "Ringo"),
birth = c(1940, 1942, 1943, 1940),
instrument = c("guitar", "bass", "guitar", "drums")
)
df[2,3]
df[c(2,4),c(2,3)]
df[c(2,4),3]
1:4
df[1:4, 1:2]
df[c(1,1,1,2,2), 1:3]
source('~/Documents/Slalom_Projects/dstrain/R/00-helper_functions.R', echo=TRUE)
# Your turn
# --------------------------
diamonds
library(tidyverse)
# nrow of diamonds
diamonds[1:6]
diamonds[1,6]
# summary of diamonds
nrow(diamonds)
str(diamonds)
dim(diamonds)
summary(diamonds)
diamonds(c[1,6])
[c(1,6)]
c(1,6)
diamonds[c(1,6)]
diamonds[c(1:6)]
# nrow of diamonds
diamonds[1:6]
head(diamonds)
View(diamonds)
qplot(x, y, data = diamonds)
w <- c(-1, 0, 1)
x <- c(5, 15)
y <- "February"
z <- c("Monday", "Tuesday", "Friday")
# Your Turn
# --------------------------------------------
w > 0
10 < x & x < 20
all(z %in% c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
y == "February"
all(z %in% c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
x_zeroes <- diamonds$x == 0
diamonds[x_zeroes, ]
x_zeroes <- diamonds$x == 0
x_zeroes
x_zeroes
x_zeroes <- diamonds$x == 0
x_zeroes
diamonds[x_zeroes, ]
x_zeroes <- diamonds$x == 0
diamonds[x_zeroes, ]
class(x_zeroes)
# create logical vector
x_and_y <- diamonds$x == diamonds$y
x_and_y
# Your Turn
# ------------------------------------
equal_dim <- diamonds$x == diamonds$y
equal_dim
equal <- diamonds[equal_dim, ]
equal
library(ggplot2)
options(stringsAsFactors = FALSE)
bnames <- read.csv("data/bnames.csv.bz2")
births <- read.csv("data/births.csv")
births
bnames
bnames
head(bnames)
tail(bnames)
getwd()
# Your Turn
# ----------------------------------------------
# create a data frame with only your name
sarvani <- bnames[bnames$name == 'Sarvani', ]
bnames
sarvani
qplot(year, prop, data = sarvani, geom = 'line')
qplot(year, prop, data = sarah, geom = 'line')
# Your Turn
# ----------------------------------------------
# create a data frame with only your name
Sarah <- bnames[bnames$name == 'Sarah', ]
qplot(year, prop, data = Sarah, geom = 'line')
# Your Turn
# ----------------------------------------------
# create a data frame with analyst names
all_folks <- bnames[bnames$name%in% c('Aaron', 'Greg'),]
all_folks
# Your Turn
# ----------------------------------------------
# create a data frame with analyst names
all_folks <- bnames[bnames$name%in% c('Aaron', 'Kathy'),]
all_folks
michael <- bnames[bnames$name == "Michael", ]
qplot(year, prop, data = michael, geom = "line")
qplot(year, prop, data = michael, geom = "point")
qplot(year, prop, data = michael, geom = "line",
color = sex)
michaels <- bnames[bnames$name == "Michael" |
bnames$name == "Michelle", ]
qplot(year, prop, data = michaels, geom = "line",
color = interaction(sex, name))
qplot(year, prop, data = all_folks, geom = "line",
color = interaction(sex, name))
# install.packages("dplyr")
library(dplyr)
bnames <- tbl_df(bnames)
births <- tbl_df(births)
class(bnames)
tbl_df(diamonds)
df <- data.frame(color = c("blue", "black", "blue", "blue", "black"), value = 1:5)
tbl <- tbl_df(df)
filter(tbl, color == "blue")
filter(df, value %in% c(1, 4))
# Your Turn
# FILTER --------------------------------
# use dplyr verbs to create a dataframe with your name
filter(dataset, name == 'names')
# Your Turn
# FILTER --------------------------------
# use dplyr verbs to create a dataframe with your name
filter(bnames, name == 'names')
select(tbl, color)
select(df, -color)
# determine location of source .RDA files
DATA_IN_LOC <- getwd()
# load clean data for modeling
load('hardisty_r_example/TRAIN.rda')
# load clean data for modeling
load('../hardisty_r_example/TRAIN.rda')
load("~/Documents/Slalom_Projects/dstrain/data/TEST.rda")
load("~/Documents/Slalom_Projects/dstrain/data/TEST_ACTUAL.rda")
load("~/Documents/Slalom_Projects/dstrain/data/CONS_USG.rda")
load("~/Documents/Slalom_Projects/dstrain/data/TRAIN.rda")
TRAIN
TRAIN_MODEL <- TRAIN %>%
group_by(train_indicator, model_indicator, CUSTOMER_KEY, TOU_CD) %>%
nest(.key = TRAIN) %>%
mutate(models = map(TRAIN, ~ earth(Y ~ X, data = ., nprune = 3)), # train model
fitted = map2(models, TRAIN, predict)) # make in sample predictions
load("data/TRAIN.rda")
load("data/TEST.rda")
load("data/CONS_USG.rda")
ggplot(TRAIN, aes(x = X, y = Y)) +
geom_jitter() +
geom_smooth(method = 'lm',aes(color = season)) +
facet_wrap(~week_day) +
ggtitle(label = 'exploring relationship betwen temp and electricity usage',subtitle = "Southern Hemisphere") +
labs(y = "electricty (kWh)", x = "Temp F")
ggplot(churn_data %>% filter(cum_gross_mrr_usd <= 200000), aes(x = total_customer_days, y  = cum_gross_mrr_usd)) +
geom_jitter()+
scale_y_continuous( labels = scales::comma) +
scale_x_continuous(limits = c(0, 2000), breaks = seq(0, 2200, by = 90)) +
ggtitle(label = 'exploring relationship betwen tenure and net mrr',subtitle = "SaaS customers with less than 200,000 monthly revenue")
churn_data <- fread('data/ah_chi_tenure_lag.csv')
ggplot(churn_data %>% filter(cum_gross_mrr_usd <= 200000), aes(x = total_customer_days, y  = cum_gross_mrr_usd)) +
geom_jitter()+
scale_y_continuous( labels = scales::comma) +
scale_x_continuous(limits = c(0, 2000), breaks = seq(0, 2200, by = 90)) +
# geom_smooth(aes(color = first_crm_mrr_band), method = 'loess') +
geom_smooth(aes(color = first_crm_mrr_band), method = 'gam', se = F) +
ggtitle(label = 'exploring relationship betwen tenure and net mrr',subtitle = "SaaS customers with less than 200,000 monthly revenue")
TRAIN_MODEL <- TRAIN %>%
group_by(train_indicator, model_indicator, CUSTOMER_KEY, TOU_CD) %>%
nest(.key = TRAIN) %>%
mutate(models = map(TRAIN, ~ earth(Y ~ X, data = ., nprune = 3)), # train model
fitted = map2(models, TRAIN, predict)) # make in sample predictions
TEST_MODEL <- TEST %>%
group_by(train_indicator, model_indicator, CUSTOMER_KEY, TOU_CD) %>%
nest(.key = TEST)
# merge train and test to make predictions on customers with observations in both train and test years
TRAIN_TEST <- left_join(TRAIN_MODEL, TEST_MODEL, by = c("CUSTOMER_KEY",'model_indicator','TOU_CD'))
TRAIN_TEST <- TRAIN_TEST %>%
mutate(predicted_usage = map2(models, TEST, predict) # need to edit code to use X +- SD for temp scenarios
)
TEMP_MODEL_RESULTS <- TRAIN_TEST %>%
select(train_indicator = train_indicator.y, model_indicator, CUSTOMER_KEY, TOU_CD, TEST, predicted_usage) %>%
unnest() %>% # unnests all elements in nested lists; needs to be edited to return only required data
as.data.table() # easier manipulation with data.table
comp_cols <- c('CUSTOMER_KEY', 'Month', 'Day', 'Year','mdy','predicted_usage','GEO_KEY'
, 'MODEL_ID','train_indicator','model_indicator','year_day', 'week_day','season'
, 'TOU_CD')
base_cols <- c('CUSTOMER_KEY', 'MODEL_ID','Actual_Usage','median_temp','train_indicator'
,'model_indicator','year_day', 'TOU_CD')
col_order <- c("CUSTOMER_KEY", "Month", "Day", "Year", "mdy", "predicted_usage",
"GEO_KEY", "MODEL_ID", "train_indicator", "model_indicator",
"year_day", "week_day", "season", "TOU_CD")
TEMP_MODEL_COMP <- copy(TEMP_MODEL_RESULTS[,comp_cols, with = FALSE])
setkey(TEMP_MODEL_COMP, CUSTOMER_KEY, year_day, TOU_CD, MODEL_ID)
setcolorder(TEMP_MODEL_COMP, col_order)
CONS_USG_COMP <- copy(CONS_USG[,comp_cols, with = FALSE])
setkey(CONS_USG_COMP, CUSTOMER_KEY, year_day, TOU_CD, MODEL_ID)
setcolorder(CONS_USG_COMP, col_order)
TEST_ACTUAL_COMP <- copy(TEST_ACTUAL[,base_cols, with = FALSE])
setkey(TEST_ACTUAL_COMP, CUSTOMER_KEY, year_day, TOU_CD, MODEL_ID)
# merge actual with temperature model
TEMP_MODEL_QUALITY <- merge(TEMP_MODEL_COMP, TEST_ACTUAL_COMP, suffixes = c(x = '_prediction', y='_actual'))
CONS_USG_QUALITY <- merge(CONS_USG_COMP, TEST_ACTUAL_COMP, suffixes = c(x = '_prediction', y='_actual'))
FULL_MODEL_QUALITY <- rbind(TEMP_MODEL_QUALITY, CONS_USG_QUALITY)
FULL_MODEL_QUALITY[,residual := Actual_Usage - predicted_usage]
FULL_MODEL_QUALITY[,on_off_peak := ifelse(week_day %in% c('Sat','Sun'), 'Off-Peak','On-Peak'),]
# generate plots ----------------------------------------------------------
# split on meaningful factors
FULL_MODEL_QUALITY_LIST <-  FULL_MODEL_QUALITY %>%
split(list(.$GEO_KEY, .$MODEL_ID), drop = TRUE)
# CREATE PLOTS USING DATA SPLIT ON BASELINE TERRITORY CODE  ---------------
ALL_PLOTS <- FULL_MODEL_QUALITY_LIST %>%
map(~ ggplot(., aes(x = median_temp, y = residual)) +
geom_jitter(aes(color = model_indicator_prediction , shape = on_off_peak), alpha = .5) +
# facet data
facet_wrap(~Month) +
# plot title variables generated by split factors
labs(
title = paste(.$Year, "Daily residuals comparing constant usage and temperature model for"
,.$GEO,'geographic area'),
subtitle = paste("Residuals calculated against",.$train_indicator_actual,'for sample group',.$MODEL_ID),
caption = "Temperature Model predicts usage based on average monthly temperature;
Constant Usage Model predicts usage based on actual usage for prior year",
x = "Median Temperature",
y = "Daily Residuals"
))
ALL_PLOTS <- FULL_MODEL_QUALITY_LIST %>%
map(~ ggplot(., aes(x = median_temp, y = residual)) +
geom_jitter(aes(color = model_indicator_prediction , shape = on_off_peak), alpha = .5) +
# facet data
facet_wrap(~Month) +
# plot title variables generated by split factors
labs(
title = paste(.$Year, "Daily residuals comparing constant usage and temperature model for"
,.$GEO_KEY,'geographic area'),
subtitle = paste("Residuals calculated against",.$train_indicator_actual,'for sample group',.$MODEL_ID),
caption = "Temperature Model predicts usage based on average monthly temperature;
Constant Usage Model predicts usage based on actual usage for prior year",
x = "Median Temperature",
y = "Daily Residuals"
))
# View plot results -------------------------------------------------------
ALL_PLOTS
ALL_PLOTS <- FULL_MODEL_QUALITY_LIST %>%
map(~ ggplot(., aes(x = median_temp, y = residual)) +
geom_jitter(aes(color = model_indicator_prediction , shape = on_off_peak)) +
# facet data
facet_wrap(~Month) +
# plot title variables generated by split factors
labs(
title = paste(.$Year, "Daily residuals comparing constant usage and temperature model for"
,.$GEO_KEY,'geographic area'),
subtitle = paste("Residuals calculated against",.$train_indicator_actual,'for sample group',.$MODEL_ID),
caption = "Temperature Model predicts usage based on average monthly temperature;
Constant Usage Model predicts usage based on actual usage for prior year",
x = "Median Temperature",
y = "Daily Residuals"
))
# View plot results -------------------------------------------------------
ALL_PLOTS[1]
